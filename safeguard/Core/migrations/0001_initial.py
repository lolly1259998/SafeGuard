# Generated by Django 4.2 on 2025-10-11 19:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('stream_url', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('online', 'En ligne'), ('offline', 'Hors ligne'), ('maintenance', 'Maintenance')], default='offline', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ControlCenter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('supervisor', 'Superviseur'), ('user', 'Utilisateur Standard')], default='user', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SecurityScenario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('apply_to_all_cameras', models.BooleanField(default=False)),
                ('event_types', models.JSONField(default=list)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('days_of_week', models.JSONField(default=list)),
                ('alert_email', models.BooleanField(default=False)),
                ('alert_sms', models.BooleanField(default=False)),
                ('save_recording', models.BooleanField(default=True)),
                ('priority', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyenne'), ('high', 'Haute'), ('critical', 'Critique')], default='medium', max_length=10)),
                ('is_active', models.BooleanField(default=False)),
                ('is_manual', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cameras', models.ManyToManyField(blank=True, to='Core.camera')),
                ('control_center', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Core.controlcenter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_scenarios', to='Core.user')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('motion', 'Mouvement'), ('unknown_face', 'Visage Inconnu'), ('suspicious_object', 'Objet Suspect'), ('intrusion', 'Intrusion')], max_length=30)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('confidence_score', models.FloatField(help_text='Score de confiance de la détection IA (0.0 à 1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('is_processed', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('camera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='Core.camera')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Core.user')),
            ],
        ),
        migrations.AddField(
            model_name='controlcenter',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='control_centers', to='Core.user'),
        ),
        migrations.AddField(
            model_name='camera',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_cameras', to='Core.user'),
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('dashboard', 'Tableau de bord')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyenne'), ('high', 'Haute'), ('critical', 'Critique')], default='medium', max_length=10)),
                ('message', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='Core.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Core.user')),
            ],
        ),
        migrations.CreateModel(
            name='ControlCenterUserAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_level', models.CharField(choices=[('view_only', 'Visualisation seule'), ('operator', 'Opérateur'), ('admin', 'Administrateur du centre')], max_length=20)),
                ('granted_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('control_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_accesses', to='Core.controlcenter')),
                ('granted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_cc_accesses', to='Core.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='control_center_accesses', to='Core.user')),
            ],
            options={
                'unique_together': {('user', 'control_center')},
            },
        ),
        migrations.CreateModel(
            name='CameraUserAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(choices=[('view_live', 'Visionner le flux en direct'), ('view_history', 'Accéder à l’historique'), ('manage_alerts', 'Gérer les alertes'), ('full_control', 'Contrôle total')], max_length=20)),
                ('granted_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('camera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_accesses', to='Core.camera')),
                ('granted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_camera_accesses', to='Core.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='camera_accesses', to='Core.user')),
            ],
            options={
                'unique_together': {('user', 'camera')},
            },
        ),
    ]
